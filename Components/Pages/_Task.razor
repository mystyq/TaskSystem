@page "/task"
@page "/task/{Id:int}"
@rendermode InteractiveServer
@inject ITaskService TaskService

<PageTitle>Create Task</PageTitle>

<EditForm EditContext="_editContext" OnValidSubmit="@HandleValidSubmit" FormName="CreateTaskForm">
    <div class="form-group mb-3">
        <label for="@nameof(_task.Title)">@nameof(_task.Title)</label>
        <input @ref="_iautofocus" id="@nameof(_task.Title)" @bind="_task.Title" class="form-control" />
        <ValidationMessage For="() => _task.Title" />
    </div>
    <div class="form-group mb-3">
        <label for="@nameof(_task.Description)">@nameof(_task.Description)</label>
        <input id="@nameof(_task.Description)" @bind="_task.Description" class="form-control" />
        <ValidationMessage For="() => _task.Description" />
    </div>
    <div class="form-group mb-3">
        <label for="@nameof(_task.Comment)">@nameof(_task.Comment)</label>
        <InputTextArea id="@nameof(_task.Comment)" @bind-Value="_task.Comment" class="form-control" />
        <ValidationMessage For="() => _task.Comment" />
    </div>
    <div class="form-group mb-3">
        <label for="@nameof(_task.Priority)">@nameof(_task.Priority)</label>
        <select id="@nameof(_task.Priority)" @bind="_task.Priority" class="form-control">
            @foreach(var priority in Data.Enums.Priority.GetValues(typeof(Priority)))
            {
                <option value="@priority">@priority</option>
            }
        </select>
    </div>
    <div class="form-group mb-3">
        <label for="@nameof(_task.TargetCompleteDate)">Complete By Date</label>
        <input id="@nameof(_task.TargetCompleteDate)" @bind="_task.TargetCompleteDate" class="form-control" type="date" />
    </div>
    <span>Estimate</span>
    <div class="input-group mb-3">
        <span class="input-group-text">Hours</span>
        <input id="@nameof(_task.EstimateHours)" @bind="_task.EstimateHours" class="form-control" type="number" min="0" />
        <span class="input-group-text">Minutes</span>
        <input id="@nameof(_task.EstimateMinutes)" @bind="_task.EstimateMinutes" class="form-control" type="number" max="60" min="0" />
    </div>
    <MudButton Color="Color.Secondary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Save</MudButton>
</EditForm>

@implements IDisposable
@inject UpdateTitleService updateTitleService
@code {
    private Data.Models.Task _task = new();

    private EditContext? _editContext;

    private ValidationMessageStore? _messageStore;

    private ElementReference _iautofocus;

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var task = await TaskService.GetTaskByIdAsync(Id);
            if(task is not null)
            {
                _task = task;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _iautofocus.FocusAsync();
        }
    }
    protected override void OnInitialized()
    {
        _editContext = new(_task);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);

        if(Id is null)
        {
            updateTitleService.UpdateTitle("Create Task");
        }
        else
        {
            updateTitleService.UpdateTitle("Edit Task");
        }
    }

    private async void HandleValidSubmit()
    {
        if (Id is not null)
        {
            await TaskService.UpdateTaskAsync(_task);
        }
        else
        {
            _task.DateCreated = DateTime.Now;
            _task.SetStatus(Data.Enums.Status.Staged);
            await TaskService.AddTaskAsync(_task);
        }
        
        NavigationManager.NavigateTo("tasks");
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();

        if (string.IsNullOrEmpty(_task.Title))
        {
            _messageStore?.Add(() => _task.Title!, "Enter a title");
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}