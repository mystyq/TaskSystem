@page "/task"
@page "/task/{Id:int}"
@rendermode InteractiveServer
@inject ITaskService TaskService
@inject ISnackbar Snackbar

<PageTitle>@(Id == null ? "Create" : "Edit") Task</PageTitle>

<EditForm EditContext="_editContext" OnValidSubmit="@HandleValidSubmit" FormName="CreateTaskForm">
    <DataAnnotationsValidator/>
    <MudTextField Label="@nameof(_task.Title)" @bind-Value="_task.Title" AutoFocus="true" For="@(() => _task.Title)" Class="mt-3"></MudTextField>
    <MudTextField Label="@nameof(_task.Description)" @bind-Value="_task.Description" For="@(() => _task.Description)" Class="mt-3"></MudTextField>
    <MudTextField Label="@nameof(_task.Comment)" @bind-Value="_task.Comment" For="@(() => _task.Comment)" Class="mt-3"></MudTextField>
    <MudDatePicker Label="Complete by date" @bind-Date="_task.TargetCompleteDate" For="@(() => _task.TargetCompleteDate)" Class="mt-3" />
    <MudText Class="mt-3">Estimated Time</MudText>
    <div class="input-group mb-3">
        <MudNumericField @bind-Value="@_task.EstimateHours" Label="Hours"></MudNumericField>
        <MudNumericField @bind-Value="@_task.EstimateMinutes" Label="Minutes"></MudNumericField>
    </div>
    <MudSelect @bind-Value="_task.Priority"
            For="@(() => _task.Priority)"
            SelectedValues="new Priority[] { _task.Priority }"
            Label="Priority"
            Placeholder="None"
            T="Priority" 
            Dense="true"
            Variant="Variant.Text"
            Class="mt-3">
    @foreach (Priority priority in Enum.GetValues(typeof(Priority)))
    {
        <MudSelectItem T="Priority" Value="priority">@priority</MudSelectItem>
    }
    </MudSelect>
    <MudButton Color="Color.Secondary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="mt-3">Save</MudButton>
</EditForm>

@implements IDisposable
@inject UpdateTitleService updateTitleService
@code {
    private Data.Models.Task _task = new();

    private EditContext? _editContext;

    private ValidationMessageStore? _messageStore;

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var task = await TaskService.GetTaskByIdAsync(Id);
            if(task is not null)
            {
                _task = task;
            }
        }
    }
    protected override void OnInitialized()
    {
        _editContext = new(_task);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);

        if(Id is null)
        {
            updateTitleService.UpdateTitle("Create Task");
        }
        else
        {
            updateTitleService.UpdateTitle("Edit Task");
        }
    }

    private async void HandleValidSubmit()
    {
        var success = false;
        if (Id is not null)
        {
            success = await TaskService.UpdateTaskAsync(_task);
        }
        else
        {
            _task.DateCreated = DateTime.Now;
            _task.SetStatus(Status.Staged);
            success = await TaskService.AddTaskAsync(_task);
        }
        if (success)
        {
            Snackbar.Add("Saved Task", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error Saving Task", Severity.Error);
        }
        NavigationManager.NavigateTo("tasks");
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();

        if (string.IsNullOrEmpty(_task.Title))
        {
            _messageStore?.Add(() => _task.Title!, "Enter a title");
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}