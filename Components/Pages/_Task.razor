@page "/task"
@page "/task/{Id:int}"
@rendermode InteractiveServer
@inject ITaskService TaskService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject UpdateTitleService UpdateTitleService
@implements IDisposable

<PageTitle>@(Id == null ? "Create" : "Edit") Task</PageTitle>

<MudContainer Style="margin-bottom:200px;padding-left:0;padding-right:0;" MaxWidth="MaxWidth.ExtraExtraLarge">
    <EditForm EditContext="_editContext" OnValidSubmit="@HandleValidSubmit" FormName="CreateTaskForm">
        <DataAnnotationsValidator/>
        <MudTextField Label="@nameof(_task.Title)" @bind-Value="_task.Title" AutoFocus="true" For="@(() => _task.Title)" Class="mt-3"></MudTextField>
        <MudTextField Label="@nameof(_task.Description)" @bind-Value="_task.Description" For="@(() => _task.Description)" Class="mt-3"></MudTextField>
        <MudTextField Variant="Variant.Outlined" Label="Comment" @bind-Value="_task.Comment" For="@(() => _task.Comment)" Class="mt-3" Lines="5"></MudTextField>
        <MudDatePicker Adornment="Adornment.Start" IconSize="Size.Small" Editable="true" Label="Complete by date" @bind-Date="_task.TargetCompleteDate" For="@(() => _task.TargetCompleteDate)" Class="mt-3"/>
        <MudText Class="mt-3">Estimated Time</MudText>
        <div class="input-group mb-3">
            <MudNumericField @bind-Value="@_task.EstimateHours" Label="Hours"></MudNumericField>
            <MudNumericField @bind-Value="@_task.EstimateMinutes" Label="Minutes"></MudNumericField>
        </div>
        <MudSelect @bind-Value="_task.Priority"
                   For="@(() => _task.Priority)"
                   SelectedValues="new[] { _task.Priority }"
                   Label="Priority"
                   Placeholder="None"
                   T="Priority"
                   Dense="true"
                   Variant="Variant.Text"
                   Class="mt-3">
            @foreach (Priority priority in Enum.GetValues(typeof(Priority)))
            {
                <MudSelectItem T="Priority" Value="priority">@priority</MudSelectItem>
            }
        </MudSelect>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="mt-3">Save</MudButton>
    </EditForm>
</MudContainer>

@code
{
    private Data.Models.Task _task = new();

    private EditContext? _editContext;

    private ValidationMessageStore? _messageStore;

    [Parameter] public int? Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            _task = await TaskService.GetTaskByIdAsync(Id);
        }
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_task);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new ValidationMessageStore(_editContext);

        UpdateTitleService.UpdateTitle(Id is null ? "Create Task" : "Edit Task");
    }

    private async void HandleValidSubmit()
    {
        bool success;
        if (Id is not null)
        {
            success = await TaskService.UpdateTaskAsync(_task);
        }
        else
        {
            _task.DateCreated = DateTime.Now;
            _task.SetStatus(Status.Staged);
            success = await TaskService.AddTaskAsync(_task);
        }
        if (success)
        {
            Snackbar.Add("Saved Task", Severity.Success);
        }
        else
        {
            Snackbar.Add("Error Saving Task", Severity.Error);
        }

        NavigationManager.NavigateTo("tasks");
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();

        if (string.IsNullOrEmpty(_task.Title))
        {
            _messageStore?.Add(() => _task.Title!, "Enter a title");
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}