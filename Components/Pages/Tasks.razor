@page "/"
@page "/tasks"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject ITaskService TaskService

<PageTitle>Tasks Overview</PageTitle>

<MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="GotoCreate">Create Task</MudButton>
<MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.Restore" OnClick="OpenClearTasksModal">Clear Tasks</MudButton>

@if (_tasksStaged is null)
{
    <p><em>Loading...</em></p>
}
else if (_tasksStaged is not null)
{
    <h6 class="mt-4 badge bg-dark m-0 w-100 text-start rounded-0 rounded-top">Staged</h6>
    <div class="mb-4 table-responsive table-wrapper">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Created</th>
                    <th>Status</th>
                    <th>Priority</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in _tasksStaged!)
                {
                    <tr @key=task>
                        <td>@task.Id</td>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.DateCreated</td>
                        <td>
                            <select @onchange="(e => StatusChanged(e, task))">
                                @foreach (Data.Enums.Status type in Enum.GetValues(typeof(Data.Enums.Status)))
                                {
                                    if (task.Status > type)
                                        continue;

                                    if (task.Status == type)
                                    {
                                        <option value="@type" selected>@type.GetDisplayName()</option>
                                    }
                                    else
                                    {
                                        <option value="@type">@type.GetDisplayName()</option>
                                    }
                                }
                            </select>
                        </td>
                        <td>@task.Priority</td>
                        <td>
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => EditTask(task.Id))">Edit</MudButton>
                            <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DeleteTask(task))">Delete</MudButton>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@if (_tasksInProgress is null)
{
    <p><em>Loading...</em></p>
}
else if (_tasksInProgress is not null)
{
    <h6 class="mt-4 badge bg-dark m-0 w-100 text-start rounded-0 rounded-top">In Progress</h6>
    <div class="mb-4 table-responsive table-wrapper">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Created</th>
                    <th>Status</th>
                    <th>Priority</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in _tasksInProgress!)
                {
                    <tr @key=task>
                        <td>@task.Id</td>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.DateCreated</td>
                        <td>
                            <select @onchange="(e => StatusChanged(e, task))">
                                @foreach (Data.Enums.Status type in Enum.GetValues(typeof(Data.Enums.Status)))
                                {
                                    if (task.Status > type)
                                        continue;

                                    if (task.Status == type)
                                    {
                                        <option value="@type" selected>@type.GetDisplayName()</option>
                                    }
                                    else
                                    {
                                        <option value="@type">@type.GetDisplayName()</option>
                                    }
                                }
                            </select>
                        </td>
                        <td>@task.Priority</td>
                        <td>
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => EditTask(task.Id))">Edit</MudButton>
                            <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DeleteTask(task))">Delete</MudButton>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@if (_tasksComplete is null)
{
    <p><em>Loading...</em></p>
}
else if (_tasksComplete is not null)
{
    <h6 class="mt-4 badge bg-dark m-0 w-100 text-start rounded-0 rounded-top">Complete</h6>
    <div class="table-responsive table-wrapper">
        <table class="table table-sm">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Created</th>
                    <th>Status</th>
                    <th>Priority</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in _tasksComplete!)
                {
                    <tr @key=task>
                        <td>@task.Id</td>
                        <td>@task.Title</td>
                        <td>@task.Description</td>
                        <td>@task.DateCreated</td>
                        <td>
                            <select @onchange="(e => StatusChanged(e, task))">
                                @foreach (Data.Enums.Status type in Enum.GetValues(typeof(Data.Enums.Status)))
                                {
                                    if (task.Status > type)
                                        continue;

                                    if (task.Status == type)
                                    {
                                        <option value="@type" selected>@type.GetDisplayName()</option>
                                    }
                                    else
                                    {
                                        <option value="@type">@type.GetDisplayName()</option>
                                    }
                                }
                            </select>
                        </td>
                        <td>@task.Priority</td>
                        <td>
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => EditTask(task.Id))">Edit</MudButton>
                            <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DeleteTask(task))">Delete</MudButton>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (ClearTasksModalOpen)
{
    <Modal OnClose="ClearTasksModalOnClose"
           Title="Clear Tasks"
           Body="Are you sure you want to clear tasks?"
           Buttons="Modal.ButtonType.DeleteCancel">
    </Modal>
}

@inject UpdateTitleService updateTitleService
@code {
#pragma warning disable CS4014
#pragma warning disable CS1998
    private List<Data.Models.Task>? _tasksStaged;
    private List<Data.Models.Task>? _tasksInProgress;
    private List<Data.Models.Task>? _tasksComplete;
    private bool ClearTasksModalOpen { get; set; }

    private void ClearTasksModalOnClose(bool clearTasks)
    {
        if (clearTasks) this.ClearTasks();

        this.ClearTasksModalOpen = false;

        StateHasChanged();
    }

    private void OpenClearTasksModal()
    {
        this.ClearTasksModalOpen = true;

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTasks();

        updateTitleService.UpdateTitle("Tasks Overview");
    }

    private void GotoCreate()
    {
        NavigationManager.NavigateTo("task");
    }

    private async void ClearTasks()
    {
        await TaskService.DeleteAllTasksAsync();
        await GetTasks();
    }

    private void EditTask(int id)
    {
        NavigationManager.NavigateTo($"task/{id}");
    }

    private async void DeleteTask(Data.Models.Task task)
    {
        task.Archived = true;
        await TaskService.UpdateTaskAsync(task);
        await GetTasks();
    }

    private async Task GetTasks()
    {
        _tasksStaged = await TaskService.GetAllTasksAsync((x) => x.Status == Data.Enums.Status.Staged && x.Archived == false);
        _tasksInProgress = await TaskService.GetAllTasksAsync((x) => x.Status == Data.Enums.Status.InProgress && x.Archived == false);
        _tasksComplete = await TaskService.GetAllTasksAsync((x) => x.Status == Data.Enums.Status.Complete && x.Archived == false);
    }

    private async void StatusChanged(ChangeEventArgs e, Data.Models.Task task)
    {
        if (Enum.TryParse<Data.Enums.Status>(e.Value?.ToString(), out var status))
        {
            task.SetStatus(status);
            await TaskService.UpdateTaskAsync(task);
            await GetTasks();
        }
    }
}