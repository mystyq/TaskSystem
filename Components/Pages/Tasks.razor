@page "/"
@page "/tasks"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject ITaskService TaskService

<PageTitle>Tasks Overview</PageTitle>

<MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="GotoCreate">Create Task</MudButton>

@if (_tasksStaged is null || _tasksInProgress is null || _tasksComplete is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudTabs Position="Position.Top" Rounded="true" Border="false" Outlined="true" ApplyEffectsToContainer="true" Class="mt-5">
        <MudTabPanel Text="Staged" BadgeData="(_tasksStaged.Count() > 0 ? _tasksStaged.Count() : null)">
            <MudDataGrid Items="@_tasksStaged" Filterable="true" SortMode="@SortMode.Multiple" Groupable="false" Dense="true" Outlined="true">
                <Columns>
                    <TemplateColumn Title="Title">
                        <CellTemplate>
                            <MudTooltip Text="@context.Item.Description">
                                <MudText>@context.Item.Title</MudText>
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.EstimateTimeSpan" Title="Estimate" Format="d\d\ h\h\ mm\m" />
                    <PropertyColumn Property="x => x.TargetCompleteDate" Title="Complete by" Format="MM/dd/yyyy" />
                    <PropertyColumn Property="x => x.Status">
                        <CellTemplate>
                            <MudSelect T="Status"
                                    Dense="true"
                                    Variant="Variant.Text"
                                    Style="margin-top:-1px;"
                                    SelectedValuesChanged="((e) => StatusChanged(e.First(), context.Item))"
                                    SelectedValues="new Status[]{ context.Item.Status }">
                                @foreach (Status status in Enum.GetValues(typeof(Status)))
                                {
                                    if (context.Item.Status > status)
                                        continue;

                                    <MudSelectItem T="Status" Value="status">@status.GetDisplayName()</MudSelectItem>
                                }
                            </MudSelect>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Priority" />
                    <TemplateColumn CellClass="d-flex justify-end" Filterable="false" Sortable="false">
                        <CellTemplate>
                            <MudStack Row="true" Style="gap:4px!important;">
                                <MudButton Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => EditTask(context.Item.Id))">Edit</MudButton>
                                <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DeleteTask(context.Item))">Delete</MudButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="In Progress" BadgeData="(_tasksInProgress.Count() > 0 ? _tasksInProgress.Count() : null)">
            <MudDataGrid Items="@_tasksInProgress" Filterable="true" SortMode="@SortMode.Multiple" Groupable="false" Dense="true" Outlined="true">
                <Columns>
                    <TemplateColumn Title="Title">
                        <CellTemplate>
                            <MudTooltip Text="@context.Item.Description">
                                <MudText>@context.Item.Title</MudText>
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.EstimateTimeSpan" Title="Estimate" Format="d\d\ h\h\ mm\m" />
                    <PropertyColumn Property="x => x.TargetCompleteDate" Title="Complete by" Format="MM/dd/yyyy" />
                    <PropertyColumn Property="x => x.Status">
                        <CellTemplate>
                            <MudSelect T="Status"
                                    Dense="true"
                                    Variant="Variant.Text"
                                    Style="margin-top:-1px;"
                                    SelectedValuesChanged="((e) => StatusChanged(e.First(), context.Item))"
                                    SelectedValues="new Status[]{ context.Item.Status }">
                                @foreach (Status status in Enum.GetValues(typeof(Status)))
                                {
                                    if (context.Item.Status > status)
                                        continue;

                                    <MudSelectItem T="Status" Value="status">@status.GetDisplayName()</MudSelectItem>
                                }
                            </MudSelect>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Priority" />
                    <TemplateColumn CellClass="d-flex justify-end" Filterable="false" Sortable="false">
                        <CellTemplate>
                            <MudStack Row="true" Style="gap:4px!important;">
                                <MudButton Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => EditTask(context.Item.Id))">Edit</MudButton>
                                <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DeleteTask(context.Item))">Delete</MudButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
        <MudTabPanel Text="Complete" BadgeData="(_tasksComplete.Count() > 0 ? _tasksComplete.Count() : null)">
            <MudDataGrid Items="@_tasksComplete" Filterable="true" SortMode="@SortMode.Multiple" Groupable="false" Dense="true" Outlined="true">
                <Columns>
                    <TemplateColumn Title="Title">
                        <CellTemplate>
                            <MudTooltip Text="@context.Item.Description">
                                <MudText>@context.Item.Title</MudText>
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.EstimateTimeSpan" Title="Estimate" Format="d\d\ h\h\ mm\m" />
                    <PropertyColumn Property="x => x.TargetCompleteDate" Title="Complete by" Format="MM/dd/yyyy" />
                    <PropertyColumn Property="x => x.Status">
                        <CellTemplate>
                            <MudSelect T="Status"
                                    Dense="true"
                                    Variant="Variant.Text"
                                    Style="margin-top:-1px;"
                                    SelectedValuesChanged="((e) => StatusChanged(e.First(), context.Item))"
                                    SelectedValues="new Status[]{ context.Item.Status }">
                                @foreach (Status status in Enum.GetValues(typeof(Status)))
                                {
                                    if (context.Item.Status > status)
                                        continue;

                                    <MudSelectItem T="Status" Value="status">@status.GetDisplayName()</MudSelectItem>
                                }
                            </MudSelect>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Priority" />
                    <TemplateColumn CellClass="d-flex justify-end" Filterable="false" Sortable="false">
                        <CellTemplate>
                            <MudStack Row="true" Style="gap:4px!important;">
                                <MudButton Color="Color.Secondary" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => EditTask(context.Item.Id))">Edit</MudButton>
                                <MudButton Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DeleteTask(context.Item))">Delete</MudButton>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
    </MudTabs>
}

@inject UpdateTitleService updateTitleService
@code {
#pragma warning disable CS4014
#pragma warning disable CS1998
    private List<Data.Models.Task>? _tasksStaged;
    private List<Data.Models.Task>? _tasksInProgress;
    private List<Data.Models.Task>? _tasksComplete;
    protected override async Task OnInitializedAsync()
    {
        await GetTasks();
        updateTitleService.UpdateTitle("Tasks Overview");
    }

    private void GotoCreate()
    {
        NavigationManager.NavigateTo("task");
    }

    private void EditTask(int id)
    {
        NavigationManager.NavigateTo($"task/{id}");
    }

    private async void DeleteTask(Data.Models.Task task)
    {
        task.Archived = true;
        await TaskService.UpdateTaskAsync(task);
        await GetTasks();
    }

    private async Task GetTasks()
    {
        _tasksStaged = await TaskService.GetAllTasksAsync((x) => x.Status == Data.Enums.Status.Staged && x.Archived == false);
        _tasksInProgress = await TaskService.GetAllTasksAsync((x) => x.Status == Data.Enums.Status.InProgress && x.Archived == false);
        _tasksComplete = await TaskService.GetAllTasksAsync((x) => x.Status == Data.Enums.Status.Complete && x.Archived == false);
    }

    private async Task StatusChanged(Status status, Data.Models.Task task)
    {
        task.SetStatus(status);
        await TaskService.UpdateTaskAsync(task);
        await GetTasks();
    }
}